import json
from web3 import Web3
from py_ecc.bn128 import *
import time
from helper import *

def decodeToG1(i):
    return (FQ(i[0]),FQ(i[1]))
m1 = 1
m2 = 2
m3 = 3
m4 = 4
ee = 5844425132127967342928220381437487834109828918930898290287508753039676205513
x = 3580843680137734545756299064029276930388356950705038602202844678809021278543
s = 3056325696173818524325303855193130836457919089524333120850468617618568457999

# params = setup()

(G, o, g1, g2, e) = setup()

print(f"o: {o}")

m1 = int(m1)%o
m2 = int(m2)%o
m3 = int(m3)%o
m4 = int(m4)%o

H1 = [7961628634607637188539783712577806576337765328923426035156181469979153096044, 9385825138797428418688941869006692684164441244013778072033101206017223737385]
H2 = [3406024024816335443038529979799368173208214308671595638075507619669611510820, 19637756202653473854123003774007841040022584114287639747160635800883014665506]
H3 = [16940590405912783894370010756911206730406112913938679911088349503087921380230, 13173525974930002988483744788221945525091136012539637574629564015629653278855]
H4 = [21518718054750589114897012728225347521909109954929417649113791111403493041080, 21529493694319755563127523136170456704052206679506896855145523871643936529251]
H5 = [2098170331303282493340905660618018870302826942570463433918324928264820734662, 5362233635265830548288207963264598126756324910519330963217638123246272840453]
H1 = decodeToG1(H1)
H2 = decodeToG1(H2)
H3 = decodeToG1(H3)
H4 = decodeToG1(H4)
H5 = decodeToG1(H5)


B = add(G1, add(multiply(H1,s),add(multiply(H2,m1),multiply(H3,m2))))
B= add(B, add(multiply(H4,m3), multiply(H5, m4)))
print(f"B: {B}\n")
print(is_on_curve(B,3))

U = (x+ee)%curve_order
print(f"U: {U}\n")

U_inverse = modInverse(U,curve_order)
print(f"U_inverse: {U_inverse}\n")

# A = (832149493974177342349466744682715249057166943350682066235450217848147870401, 12580028657038151823534228289948393581229517453480835152626096999385245899890)
A=multiply(B,U_inverse)
A = decodeToG1(A)
print("this is A")
print(is_on_curve(A,3))
print(f"A: {A}\n")
b2 = FQ2([3, 0]) / FQ2([9, 1])
left_value = add(multiply(G2,x), multiply(G2,ee))
print(is_on_curve(left_value,b2))



right_value = ec_sum([G1, multiply(H1,s), multiply(H2, m1), multiply(H3, m2),multiply(H4, m3), multiply(H5, m4) ])
print(f"right_value:{right_value}")

print(is_on_curve(right_value,3))
print(is_on_curve(G2,b2))

p1 = e(left_value, A )
print(f"p1: {p1}\n")
p2 = e(g2,right_value)
print(f"p2: {p2}\n")

if p1==p2:
    print("true")
else:
    print("false")